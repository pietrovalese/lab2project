#! /usr/bin/env python3
#client2
import socket, struct, argparse,  concurrent.futures, logging

HOST = "127.0.0.1"  # The server's hostname or IP address
PORT = 58888       # The port used by the server


logging.basicConfig(filename='server.log',
                    level=logging.DEBUG, filemode="w", datefmt='%d/%m/%y %H:%M:%S',
                    format='%(asctime)s - %(levelname)s - %(message)s')

def main(filename, host, port):
  with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((host, port))
    messaggio = struct.pack("!i", 1)
    s.sendall(messaggio)
    with open(filename, 'r') as file:
        for line in file: 
          s.sendall(struct.pack("!i",len(line)))#formato big endian
          s.sendall(line.encode())
    s.sendall(struct.pack("!i",len("")))
    sequenze= recv_all(s, 4)
    sequenze_unpack=struct.unpack("!i",sequenze)
    logging.debug(f"sequenze ricevute: {sequenze_unpack}")
    s.shutdown(socket.SHUT_RDWR)

def recv_all(conn,n):
  chunks = b''
  bytes_recd = 0
  while bytes_recd < n:
    chunk = conn.recv(min(n - bytes_recd, 1024))
    if len(chunk) == 0:
      raise RuntimeError("socket connection broken")
    chunks += chunk
    bytes_recd = bytes_recd + len(chunk)
  return chunks

parser = argparse.ArgumentParser()
parser.add_argument('filename', nargs = "+", help='nomi dei file')  #si aspetta 1 o piÃ¹ file
args = parser.parse_args()
with concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor: #esegue im paralle lo funzione main con max 5 thread
  for filename in args.filename:
      executor.submit(main, filename, HOST, PORT)
    
    